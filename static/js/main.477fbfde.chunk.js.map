{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/loading.gif","images/image.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Cards","loadingImage","src","loading","recoveryRate","toFixed","deathRate","Grid","spacing","justify","item","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","App","state","setState","this","image","logo","Date","toDateString","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.477fbfde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"loadingImage\":\"Cards_loadingImage__1cIkw\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255,0,0,0.5)',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: ['Infected', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: 'People',\n            backgroundColor: [\n              'rgba(0, 0, 255, 0.5)',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)',\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=''\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=''>Global</option>\n        {countries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\nimport loading from '../../images/loading.gif';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) return <img className={styles.loadingImage} src={loading} />;\n\n  let recoveryRate = ((recovered.value * 100) / confirmed.value).toFixed(2);\n  let deathRate = ((deaths.value * 100) / confirmed.value).toFixed(2);\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify='center'>\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant='h3'>\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={1.5}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>Total Cases</Typography>\n            <Typography variant='body2'>\n              Number of Active Cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant='h3'>\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={1.5}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>\n              Recovery Rate: {recoveryRate}%\n            </Typography>\n            <Typography variant='body2'>\n              Number of Active Cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant='h3'>\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={1.5}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>\n              Death Rate: {deathRate}%\n            </Typography>\n            <Typography variant='body2'>\n              Number of Active Cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { Typography } from '@material-ui/core';\nimport { fetchData } from './api';\n\nimport logo from './images/image.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data: data, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={logo} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Typography color='textSecondary'>\n          Last Updated: {new Date(data.lastUpdate).toDateString()}\n        </Typography>\n        <Cards data={data} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/loading.5544f299.gif\";","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}